# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

#
# NOTE: GitHub secrets must be manually added in GitHub.
# SWA_GITHUB_PERSONAL_TOKEN: Personal access token for the GitHub account that will be used to authenticate to GitHub
# Must have workflow scope to allow adding and updating of GitHub workflow files
# This is created under GitHub Settings > Developer Settings > Personal access tokens > Tokens (Classic)
# AZURE_CLIENT_ID: Application client ID
# AZURE_TENANT_ID: Tenant ID
# AZURE_SUBSCRIPTION_ID: Subscription ID
# AZURE_SERVICE_PRINCIPAL_ID: Service principal ID associated with the application client ID
# AZURE_DEPLOYMENT_RG: Resource group name for deployment objects (i.e. deployment history)
# These are created in the repo itself under Settings > Secrets and Variables > Actions > New repository secret
#

name: 'Build and deploy a webapp Bicep infrastructure to Azure'

# Using workload identity federation to authenticate to Azure
permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
    - main
  workflow_dispatch:

jobs:
  # Steps within a job are always executed sequentially!
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3
      with:
        submodules: true
        # A token is needed to checkout private submodules
        # Since we pretty much need the same access, we can use the same token as for the SWA
        # since the token is associated with the GitHub account rather than a repo
        token: ${{ secrets.SWA_GITHUB_PERSONAL_TOKEN }}  
      
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
      # Azure credentials are stored in GitHub secrets
      # This assumes that an Application Registration has been created in Azure AD with an associated 
      # service principal and that the service principal has been granted contributor access to the
      # resource group where the Azure infrastructure will be deployed
        client-id: ${{secrets.AZURE_CLIENT_ID}}
        tenant-id: ${{secrets.AZURE_TENANT_ID}}
        subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}

    # Note: if you want a less "secure??" perhaps suitable for one off project, then you can
    # use azure credentials (containing client Id, client secret, tenant Id, subscription Id, etc.)
    # which you can obtain by creating an rbac service principal like this:
    # az ad sp create-for-rbac --name "CICD" --role contributor --scopes /subscriptions/<SUBSCRIPTION_ID> --sdk-auth
    # Copy the JSON returned by this command into the GitHub secret, which we typically name AZURE_CREDENTIALS.
    # Essentially, this is a standard service principal that uses a client secret for authentication.
    # The use the login step now looks like this: 
    # - name: 'Az CLI login'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Update the bicepparam file'
      id: update-bicepparam-file
      run: |
        sed -i 's/<PRINCIPAL_ID>/'${{ secrets.AZURE_SERVICE_PRINCIPAL_ID }}'/g' ./azure.bicepparam
        sed -i 's/<SWA_PA_TOKEN>/'${{ secrets.SWA_GITHUB_PERSONAL_TOKEN }}'/g' ./azure.bicepparam

    # The CLI equivalent to this is:
    # az deployment sub create --name myAppBicepDeployment --location westeurope --subscription <SUBSCRIPTION_ID> \
    # --template-file ./azure.bicep \
    # --parameters ./azure.bicepparam  principalId=<PRINCIPAL_ID> rgName=<REGION_NAME> swaGithubToken=<SWA_GITHUB_PA>
    - name: 'Deploy the Azure infrastructure using Bicep'
      # See https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
      uses: azure/arm-deploy@v1
      id: deploy-bicep
      with:
        scope: resourcegroup
        subscriptionId: ${{secrets.AZURE_SUBSCRIPTION_ID}}
        # This resource group contains the deloyment objects (i.e. deployment history)
        resourceGroupName: ${{ secrets.AZURE_DEPLOYMENT_RG }}
        template: ./azure.bicep
        parameters: ./azure.bicepparam
        # failOnStdErr equals false implies that if some data is written to stdErr and return code from 
        # az-cli is 0, then action will continue execution. Set it to false when stdErr is being used 
        # to stream warning or progress info.
        failedOnStdErr: false
        deploymentName: myAppBicepDeployment

    - name: Azure logout
      run: |
        az logout

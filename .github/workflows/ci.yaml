# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

#
# NOTE: GitHub secrets must be manually added in GitHub.
# PERSONAL_ACCESS_TOKEN: Personal access token for the GitHub account that will be used to authenticate to GitHub
# Must have workflow scope to allow adding and updating of GitHub workflow files and admin:org scope to allow a push operation
# Note: technically an SWA only needs workflow scope, but I don't want to create a separate token for the web app.
# This is created under GitHub Settings > Developer Settings > Personal access tokens > Tokens (Classic)
# AZURE_CLIENT_ID: Application client ID
# AZURE_TENANT_ID: Tenant ID
# AZURE_SUBSCRIPTION_ID: Subscription ID
# AZURE_SERVICE_PRINCIPAL_ID: Service principal ID associated with the application client ID
# These are created in the repo itself under Settings > Secrets and Variables > Actions > New repository secret
#

# Manually add a GitHub repository variable 
# AZURE_DEPLOYMENT_RG: Resource group name for deployment 
# These are created in the repo itself under Settings > Secrets and Variables > Actions > Variables > New repository variable 
# See configuration variables: https://docs.github.com/en/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows

# Manually create an environment called "confirm-deployment"
# Add ourselves as a reviewer to the environment
# This allows us to manually approve the deployment after the bicep file is validated
# See https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#creating-an-environment
# These are created in the repo itself under Settings > Environments > New environment 
# > Configure environment > Require reviewers > Save protection rules

# ADDITIONAL NOTES:
# At the start of each workflow job, GitHub automatically creates a unique GITHUB_TOKEN secret to use 
# in your workflow. You can use the GITHUB_TOKEN to authenticate in the workflow job.
# When you enable GitHub Actions, GitHub installs a GitHub App on your repository. 
# The GITHUB_TOKEN secret is a GitHub App installation access token. You can use the installation
 # access token to authenticate on behalf of the GitHub App installed on your repository.
 # The token's permissions are limited to the repository that contains your workflow.
# The token is also available in the github.token context.
# You can use the GITHUB_TOKEN by using the standard syntax for referencing secrets:
# ${{ secrets.GITHUB_TOKEN }}.
# You can change the permissions associated with this token, 
# see https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository

name: 'Build and deploy a webapp Bicep infrastructure to Azure'

# Using workload identity federation to authenticate to Azure
permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
    - main
  workflow_dispatch:

# jobs are executed in parallel by default but using "needs" can make them work sequentially
jobs:
  bicepparam-update-job:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
      with:
        submodules: true
        token: ${{secrets.PERSONAL_ACCESS_TOKEN}}  

    # See notes in the later job about updating bicepparam file
    - name: 'Update the bicepparam file'
      id: update-bicepparam-file
      run: |
        sed -i 's/<PRINCIPAL_ID>/'${{secrets.AZURE_SERVICE_PRINCIPAL_ID}}'/g' ./azure.bicepparam
        sed -i 's/<SWA_PA_TOKEN>/'${{secrets.PERSONAL_ACCESS_TOKEN}}'/g' ./azure.bicepparam
    - name: 'Cache the bicepparam file'
      uses: actions/upload-artifact@v3
      with:
        name: bicepparam-data
        path: |
          ./azure.bicep
          ./azure.bicepparam
          ./github/workflows/bicep_validation.yaml
          ./bicep_modules
        retention-days: 1

  # # Reusable workflows must be used as jobs, they cannot be added as steps to another job!!
  # bicep-validation-job:
  #   needs: bicepparam-update-job
  #     # Reusable workflow to lint and validate Bicep file
  #   uses: ./.github/workflows/bicep_validation.yaml
  #   with:
  #     files_artifact: bicepparam-data
  #     bicep_file: ./azure.bicep
  #     bicep_params_file: ./azure.bicepparam
  #   # Workflows that call reusable workflows in the same organization or 
  #   # enterprise can use the inherit keyword to implicitly pass the secrets. 
  #   # You can then reference them even if they are not explicitly defined here.
  #   secrets: inherit

  # # Warning: using environment changes the federated credentials required to
  # # something like: repo:UWTSDStudents/productdev:environment:confirm-deployment
  # # for the job. Hence, I've added a specif job for user confirmation.
  # user-confirm-job:
  #   runs-on: ubuntu-latest
  #   needs: bicep-validation-job
  #   environment: confirm-deployment
  #   steps:
  #   - run: echo "Confirmed deployment"
     
  # Steps within a job are always executed sequentially!
  # You must add the "confirm-deployment" environment to the GitHub repository and
  # specify who can confirm that this job should go ahead.
  build-and-deploy-job:
    runs-on: ubuntu-latest
    #needs: user-confirm-job
    # We cannot direclty use a secret in a conditional expression, so we need to use an environment variable.
    # If a secret has not been set, the return value of an expression referencing the secret will be an empty string.
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
    env:
      existing_site_creds: ${{secrets.AZURE_CREDENTIALS}}  
    
    steps:
      # Checkout the web app code repo
      # Note: folder and files you checkout, do not persist across jobs.
      # Use a cache, to persist folders and files across jobs.
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
      with:
        submodules: recursive
        # A token is needed to checkout private submodules
        # Since we pretty much need the same access, we can use the same token 
        # since the token is associated with the GitHub account rather than a repo
        token: ${{secrets.PERSONAL_ACCESS_TOKEN}}    
        
    - name: 'Bash shell setup and code cleanup'
      run: |
        # Install dos2unix to convert line endings
        sudo apt-get install dos2unix
        # Clean scripts and make them executable.
        chmod +x ./bicep_modules/cmd-scripts/*.azcli
        dos2unix ./bicep_modules/cmd-scripts/*.azcli

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
      # Azure credentials are stored in GitHub secrets
      # This assumes that an Application Registration has been created in Azure AD with an associated 
      # service principal and that the service principal has been granted contributor access to the
      # resource group where the Azure infrastructure will be deployed
        client-id: ${{secrets.AZURE_CLIENT_ID}}
        tenant-id: ${{secrets.AZURE_TENANT_ID}}
        subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}

    # Note: if you want a less "secure??" perhaps suitable for one off project, then you can
    # use azure credentials (containing client Id, client secret, tenant Id, subscription Id, etc.)
    # which you can obtain by creating an rbac service principal like this:
    # az ad sp create-for-rbac --name "CICD" --role contributor --scopes /subscriptions/<SUBSCRIPTION_ID> --sdk-auth
    # Copy the JSON returned by this command into the GitHub secret, which we typically name AZURE_CREDENTIALS.
    # Essentially, this is a standard service principal that uses a client secret for authentication.
    # The use the login step now looks like this: 
    # - name: 'Az CLI login'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Some information required in the bicepparam file is not know unitl the resources
    # are created, so we need to update the bicepparam file with this information
    # Note: we are doing this because currently it is not possible to override values in
    # the bicepparam file using bicep. Although, you can do it if you use JSON :-( by
    # just passing the parameters alongside the json params file.   
    - name: 'Update the bicepparam file'
      id: update-bicepparam-file
      run: |
        sed -i 's/<PRINCIPAL_ID>/'${{secrets.AZURE_SERVICE_PRINCIPAL_ID}}'/g' ./azure.bicepparam
        sed -i 's/<SWA_PA_TOKEN>/'${{secrets.PERSONAL_ACCESS_TOKEN}}'/g' ./azure.bicepparam

    # The CLI equivalent to this is:
    # az deployment sub create --name myAppBicepDeployment --location westeurope --subscription <SUBSCRIPTION_ID> \
    # --template-file ./azure.bicep \
    # --parameters ./azure.bicepparam  principalId=<PRINCIPAL_ID> rgName=<REGION_NAME> swaGithubToken=<SWA_GITHUB_PA>
    - name: 'Deploy the Azure infrastructure using Bicep'
      # See https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
      uses: azure/arm-deploy@v1
      id: deploy_bicep
      with:
        scope: resourcegroup
        subscriptionId: ${{secrets.AZURE_SUBSCRIPTION_ID}}
        # This resource group contains the deloyment objects (i.e. deployment history)
        resourceGroupName: ${{vars.AZURE_DEPLOYMENT_RG}}
        template: ./azure.bicep
        parameters: ./azure.bicepparam
        # failOnStdErr equals false implies that if some data is written to stdErr and return code from 
        # az-cli is 0, then action will continue execution. Set it to false when stdErr is being used 
        # to stream warning or progress info.
        failOnStdErr: false
        deploymentName: infrastructureDeployment

    # Create the site credentials and push a workflow file to the repo where the web app code is stored
    # These credentials are required to enable code deployment from GitHub
    - if: ${{env.existing_site_creds == ''}}
      name: 'Create the site credentials'
      uses: azure/CLI@v1 
      id: site-creds
      with:
          inlineScript: |
              chmod +x ./bicep_modules/cmd-scripts/web-app-site-creds.azcli
              dos2unix ./bicep_modules/cmd-scripts/web-app-site-creds.azcli
              echo "Resource Group ${{vars.AZURE_DEPLOYMENT_RG}} and webapp name ${{steps.deploy_bicep.outputs.webAppName}}"
              SITE_CREDENTIALS=$(./bicep_modules/cmd-scripts/web-app-site-creds.azcli ${{secrets.AZURE_SERVICE_PRINCIPAL_ID}} ${{secrets.AZURE_SUBSCRIPTION_ID}} ${{vars.AZURE_DEPLOYMENT_RG}} ${{steps.deploy_bicep.outputs.webAppName}})
              # Mask the credentials so they are not shown in workflow logs
              echo "::add-mask::$SITE_CREDENTIALS"
              echo SITE_CREDENTIALS=$SITE_CREDENTIALS >> $GITHUB_ENV

    # Now store the site credentials as a GitHub secret in the repo where the web app code is stored
    # Note: you will need to add a workflow file to the repo to use the secret
    - if: ${{env.existing_site_creds == ''}}
      name: 'Store the site credentials as GitHub secret'
      uses: gliech/create-github-secret-action@v1
      id: store-site-creds
      with:
        name: AZURE_CREDENTIALS
        # value: ${{ steps.deploy_bicep.outputs.creds.site_creds }}
        value: ${{env.SITE_CREDENTIALS}}
        pa_token: ${{secrets.PERSONAL_ACCESS_TOKEN}} # <PERSONAL ACCESS TOKEN other repo>…requires admin:org scope
        location: "UWTSDStudents/productwebapi" 

    - name: 'Update the submodules so we can make changes'
      if: github.event_name == 'push'    # Only run this step if the workflow was triggered by a push even
      run: |
        git submodule update --init --recursive
        git submodule update --recursive --remote
        
    - name: 'Create workflow file for web api code deployment'
      if: github.event_name == 'push'    # Only run this step if the workflow was triggered by a push even
      run: |
        cd webapi  # Change directory to the webapi repo submodule
        mkdir -p .github/workflows
        ../bicep_modules/cmd-scripts/create-web-app-nodejs-worflow.azcli ${{steps.deploy_bicep.outputs.webAppName}} 'AZURE_CREDENTIALS'

    - name: "Commit and push to webapi repo"
      if: github.event_name == 'push'    # Only run this step if the workflow was triggered by a push event
      uses: EndBug/add-and-commit@v9
      with:
        cwd: webapi  # The working directory
        author_name: Continuous Integration
        author_email: username@users.noreply.github.com
        message: Continuous Integration Build Artifacts
        add: '.github/workflows/cd.yaml'
        push: true        
        new_branch: main  # Weirdly, we have to specify 'main' otherwise it doesn't know the branch
        tag: 'ci:${{github.run_number}}'  # This is the tag that will be created

    - name: "Commit and push submodule in main repo"
      if: github.event_name == 'push'    # Only run this step if the workflow was triggered by a push event
      uses: EndBug/add-and-commit@v9
      with:
        author_name: Continuous Integration
        author_email: username@users.noreply.github.com
        message: Continuous Integration Build Artifacts
        add: './webapi'
        push: true        
        tag: 'ci:${{github.run_number}}'  # This is the tag that will be created

    # An interesting approach to automatically tag the repo
    # - uses: phish108/autotag-action@v1.1.55
    #   if: github.event_name == 'push'    # Only run this step if the workflow was triggered by a push even
    #   with:
    #     github-token: ${{secrets.PERSONAL_ACCESS_TOKEN}}

    # Create bicepparam file for the web api manual code deployment
    - name: 'Params to enable web app code deployment'
      id: code-deployment-params
      shell: bash
      run: |
        echo "Organization "$(echo ${{steps.deploy_bicep.outputs.webAppGithubUrl}} | awk -F/ '{print $4}')
        echo "Repo "$(echo ${{steps.deploy_bicep.outputs.webAppGithubUrl}} | awk -F/ '{print $5}')
        sed -i 's/<WEB_APP_NAME>/'${{steps.deploy_bicep.outputs.webAppName}}'/g' ./web-app-github-code-deployment.bicepparam
        sed -i 's#<GITHUB_URL>#'${{steps.deploy_bicep.outputs.webAppGithubUrl}}'#g' ./web-app-github-code-deployment.bicepparam
        sed -i 's/<BRANCH>/'${{steps.deploy_bicep.outputs.webAppBranch}}'/g' ./web-app-github-code-deployment.bicepparam
    # sed -i 's/<RUNTIME>/'"${{steps.deploy_bicep.outputs.webAppRuntime}}"'/g' ./web-app-github-code-deployment.bicepparam       
        
    # This step is not strictly necessary since we manually pushed a workflow to the web api repo
    - name: 'Enable code deployment from GitHub'
      # See https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
      uses: azure/arm-deploy@v1
      id: source-control-bicep
      with:
        scope: resourcegroup
        subscriptionId: ${{secrets.AZURE_SUBSCRIPTION_ID}}
        # This resource group contains the deloyment objects (i.e. deployment history)
        resourceGroupName: ${{vars.AZURE_DEPLOYMENT_RG}}
        template: ./bicep_modules/web-app-github-code-deployment.bicep
        parameters: ./web-app-github-code-deployment.bicepparam
        # failOnStdErr equals false implies that if some data is written to stdErr and return code from 
        # az-cli is 0, then action will continue execution. Set it to false when stdErr is being used 
        # to stream warning or progress info.
        failOnStdErr: false
        deploymentName: enableAppCodeDeployment

    - name: Azure logout
      run: |
        az logout
